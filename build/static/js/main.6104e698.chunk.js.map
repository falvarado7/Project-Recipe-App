{"version":3,"sources":["RecipeCreate.js","RecipeView.js","RecipeList.js","RecipeData.js","App.js","index.js"],"names":["RecipeCreate","_ref","createRecipe","initialFormState","name","cuisine","photo","ingredients","preparation","formData","setFormData","useState","handleChange","_ref2","target","value","React","createElement","onSubmit","event","preventDefault","className","id","type","placeholder","size","onChange","rows","RecipeView","recipe","count","deleteRecipe","src","onClick","RecipeList","recipes","map","index","key","RecipeData","App","setRecipes","indexToDelete","currentRecipes","filter","post","newRecipe","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6104e698.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./RecipeCreate.css\"\n\n\nfunction RecipeCreate({ createRecipe }) {\n\n  // TODO: When the form is submitted, a new recipe should be created, and the form contents cleared.\n  // TODO: Add the required input and textarea form elements.\n  // TODO: Add the required submit and change handlers\n  \n  const initialFormState = {\n    name: \"\",\n    cuisine: \"\",\n    photo: \"\",\n    ingredients: \"\",\n    preparation: \"\",\n  }\n  \n  const [formData, setFormData] = useState({ ...initialFormState });\n  \n  const handleChange = ({ target }) => {\n    setFormData({\n      ...formData,\n      [target.name]: target.value,\n    });\n  };\n  \n  const handleSubmit = (event) => {\n    event.preventDefault();\n    createRecipe(formData);\n    setFormData({ ...initialFormState });\n  }\n  \n  return (\n    <form onSubmit={handleSubmit} name=\"create\">\n      <table>\n        <col className=\"single\" />\n        <col className=\"single\" />\n        <col className=\"single\" />\n        <col className=\"double\" />\n        <col className=\"double\" />\n        <col className=\"single\" />\n        <tbody>\n          <tr>\n            <td>\n              <input\n                id=\"name\"\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Name\"\n                size=\"5\"\n                onChange={handleChange}\n                value={formData.name}\n              />\n            </td>\n            <td>\n              <input\n                id=\"cuisine\"\n                name=\"cuisine\"\n                placeholder=\"Cuisine\"\n                type=\"text\"\n                size=\"5\"\n                onChange={handleChange}\n                value={formData.cuisine}\n              />\n            </td>\n            <td>\n              <input\n                id=\"photo\"\n                type=\"text\"\n                name=\"photo\"\n                placeholder=\"URL\"\n                size=\"5\"\n                onChange={handleChange}\n                value={formData.photo}\n              />\n            </td>\n            <td>\n              <textarea\n                id=\"ingredients\"\n                name=\"ingredients\"\n                placeholder=\"Ingredients\"\n                rows={3}\n                onChange={handleChange}\n                value={formData.ingredients}\n              />\n            </td>\n            <td>\n              <textarea\n                id=\"preparation\"\n                name=\"preparation\"\n                placeholder=\"Preparations\"\n                rows={3}\n                onChange={handleChange}\n                value={formData.preparation}\n              />\n            </td>\n            <td>\n              <button type=\"submit\">Create</button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </form>\n  );\n}\n\nexport default RecipeCreate;\n","import React from \"react\";\nimport \"./RecipeView.css\"\n\n\nfunction RecipeView({ recipe, count, deleteRecipe }) {\n  return (\n    <tr className={count % 2 === 0 ? \"orange\" : \"white\"}>\n      <td>\n        <p>{recipe.name}</p>\n      </td>\n      <td>\n        <p>{recipe.cuisine}</p>\n      </td>\n      <td>\n        <img src={recipe.photo} />\n      </td>\n      <td className=\"content_td\">\n        <p>{recipe.ingredients}</p>\n      </td>\n      <td className=\"content_td\">\n        <p>{recipe.preparation}</p>\n      </td>\n      <td>\n        <button name=\"delete\" onClick={deleteRecipe}>Delete</button>\n      </td>\n    </tr>\n  );\n}\n\n\n  \nexport default RecipeView;","import React from \"react\";\nimport RecipeView from \"./RecipeView\"\n\nfunction RecipeList({ recipes, deleteRecipe }) {\n  \n  // TODO: Display the list of recipes using the structure of table that is provided.\n  // TODO: Create at least one additional component that is used by this component.\n  // TODO: Each recipe row must have a delete button - <button name=\"delete\">Delete</button> - that deletes the post when clicked\n\n  return (\n    <div className=\"recipe-list\">\n      <table>\n        <col className=\"single\" />\n        <col className=\"single\" />\n        <col className=\"single\" />\n        <col className=\"double\" />\n        <col className=\"double\" />\n        <col className=\"single\" />\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Cuisine</th>\n            <th>Photo</th>\n            <th>Ingredients</th>\n            <th>Preparations</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {recipes.map((recipe, index) => (\n            <RecipeView\n              deleteRecipe={() => deleteRecipe(index)}\n              key={index}\n              recipe={recipe}\n              count={index}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default RecipeList;\n","/**\n* This is the data that is initially loaded.\n* Please do not modify this file.\n*/\n\nconst RecipeData = [\n  {\n    name: \"Tuna Poke with Mango\",\n    cuisine: \"Hawaiian\",\n    photo: \"https://www.foodista.com/sites/default/files/styles/recype/public/tunapokebowlwithmango22.jpg\",\n    ingredients: \"1 package of sushi grade tuna. 1 cup cooked quinoa ½ avocado, sliced. ½ mango, cubed. 1 shredded carrot. 1 small sliced cucumber. poke sauce.\",\n    preparation: \"1. Chop tuna into cubes. 2. Toss with 1 tbsp sesame oil and 1 tbsp tamari. Set aside. 3. Layer your poke bowl starting with quinoa. 4. Whisk all poke sauce ingredients in a bowl and pour over the poke bowl. 5. Garnish with sesame seeds and furikake. 6. Top with chopped scallions.\"\n  },\n  {\n    name: \"Guacamole\",\n    cuisine: \"Mexican\",\n    photo: \"https://www.foodista.com/sites/default/files/styles/recype/public/017.jpg\",\n    ingredients: \"3 ripe avocados. ¾ cup finely chopped Roma tomato. 2 serrano chiles very finely chopped (seeded and deveined). 3 heaping tablespoons of finely chopped onion. 3 tablespoons of minced cilantro. Salt to taste\",\n    preparation: \"1. Remove the flesh of the avocados. 2. Mash the avocados with the back of a fork. 3. Add the other ingredients and incorporate evenly. 4. Add salt to taste.\"\n  },\n];\n\nexport default RecipeData;","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport RecipeCreate from \"./RecipeCreate\";\nimport RecipeList from \"./RecipeList\";\nimport RecipeData from \"./RecipeData\"\n\nfunction App() {\n  const [recipes, setRecipes] = useState(RecipeData);\n  const createRecipe = (newRecipe) => \n    setRecipes((currentRecipes) => [\n      ...currentRecipes,\n      newRecipe,\n    ]);\n  const deleteRecipe = (indexToDelete) =>\n  setRecipes((currentRecipes) => \n    currentRecipes.filter((post, index) => index !== indexToDelete)\n  );\n\n  // TODO: Add the ability for the <RecipeList /> component to list and delete an existing recipe.\n  // TODO: Add the ability for the <RecipeCreate /> component to create new recipes.\n\n  \n  return (\n    <div className=\"App\">\n      <header><h1>Delicious Food Recipes</h1></header>\n      <RecipeList \n        recipes={recipes}\n        deleteRecipe={deleteRecipe}\n      />\n      <RecipeCreate createRecipe={createRecipe} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}